
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id  @default(autoincrement())
  role UserRole
  email String @unique
  password String?
  google_id String?
  provider Provider
  status UserStatus @default(Active)
  author Author?
  reader Reader?
  staff Staff?
  passwordChangedAt DateTime?
  join_date DateTime @default(now())
  updated_at DateTime @updatedAt
  payments Payment[]
  bookmarks Bookmark[]
  @@map("users")
}





model Reader {
   id Int @id  @default(autoincrement())
   user_id Int @unique
   user  User @relation(fields: [user_id],references: [id])
   first_name String
   last_name String
   profile_photo String?
   following Follower[]
   comments Comment[]
   subscriptions Subscription[]
   blog_read_history BlogReadHistory[]
   @@map("readers")
}





model Author {
   id Int @id  @default(autoincrement())
   user_id Int @unique
   user  User @relation(fields: [user_id],references: [id])
   first_name String
   last_name String
   profile_photo String
   bio String
   social_links SocialLink[]
   blogs Blog[]
   followers Follower[]
   updated_at DateTime @updatedAt
   @@map("authors")
}



model Staff {
    id Int @id  @default(autoincrement())
    user_id Int @unique
    user  User @relation(fields: [user_id],references: [id])
    first_name String
    last_name String
    profile_photo String?
    updated_at DateTime @updatedAt
    @@map("staffs")
}

model SocialLink {
  author_id    Int                                      
  author Author @relation(fields: [author_id],references: [id])   
  platform  SocialPlatform
  url       String   
  created_at DateTime @default(now())             
  updated_at DateTime @updatedAt   
  @@id([author_id,platform])   
  @@map("social_links")           
}




model Blog{
  id Int @id  @default(autoincrement())
  author_id Int 
  author Author @relation(fields: [author_id],references: [id])
  title String 
  content String
  short_description String 
  category_id Int
  category Category @relation(fields: [category_id],references: [id])
  featured_image String
  is_premium Boolean @default(false)
  tags  BlogTag[]
  slug String @unique
  publish_date DateTime
  privacy_status BlogPrivacyStatus
  status BlogStatus
  views_count Int @default(0) 
  likes_count Int @default(0)
  dislikes_count Int @default(0)
  created_at DateTime @default(now())          
  updated_at DateTime @default(now())
  reactions BlogReaction[]
  comments Comment[]
  bookmarks Bookmark[]
  blog_read_histories BlogReadHistory[]
  @@map("blogs")
}

model BlogTag {
  id Int @id  @default(autoincrement())
  blog_id Int
  name String
  title Blog @relation(fields: [blog_id],references: [id],onDelete:Cascade)
  @@map("blog_tags")
}

model SearchQuery {
  query String @unique
  count Int
}


model SearchHistory {
  user_id Int
  keyword String 
  @@id([user_id,keyword])
}


model Category {
   id Int @id  @default(autoincrement())
   name String
   slug String @unique
   image_url String?
   description String? @db.VarChar(1000)
   parent_id Int?
   is_featured Boolean @default(false)
   parent Category? @relation("children",fields: [parent_id],references: [id],onDelete:Cascade ) 
   children Category[] @relation("children")
   blogs Blog[]
   created_at DateTime @default(now())
   updated_at DateTime @updatedAt()
   @@map("categories")
}


model Follower {
  reader_id Int                                      // User who follows
  author_id Int  
  reader Reader @relation(fields: [reader_id],references: [id])
  author Author @relation(fields: [author_id],references: [id])
  status FollowerStatus @default(Active)
  created_at DateTime @default(now())                                   // User being followed
  @@id([reader_id,author_id])
  @@map("followers")
}


model Bookmark {
  blog_id Int
  blog Blog @relation(fields: [blog_id],references: [id])
  user_id Int
  user User @relation(fields: [user_id],references: [id])
  is_starred Boolean @default(false)
  created_at DateTime @default(now())
  @@id([blog_id,user_id])
  @@map("bookmarks")
}



model Comment {
  id Int @id  @default(autoincrement())
  content String
  reader_id Int 
  blog_id Int
  parent_id Int?
  parent Comment? @relation("comment_replies",fields: [parent_id],references: [id],onDelete:Cascade ) 
  replies Comment[] @relation("comment_replies")
  reader Reader @relation(fields: [reader_id],references: [id])
  blog Blog @relation(fields: [blog_id],references: [id],onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  reactions CommentReaction[]
  @@map("comments")
}


model BlogReaction {
 type ReactionType
 blog_id Int
 reader_id Int
 post Blog @relation(fields: [blog_id],references: [id],onDelete: Cascade)
 @@id([blog_id,reader_id])
 @@map("blog_reactions")
}

model CommentReaction {
 type ReactionType
 comment_id Int
 reader_id Int
 comment Comment @relation(fields: [comment_id],references: [id],onDelete: Cascade)
 @@id([reader_id,comment_id])
 @@map("comment_reactions")
}



model Plan {
   id Int @id  @default(autoincrement())
   name String 
   price Int
   discount Int
   discount_type PlanDiscountType
   features PlanFeature[]
   validity_days Int
   status PlanStatus @default(Active)
   created_at DateTime @default(now())
   updated_at DateTime @updatedAt
   subscriptions Subscription[]
   @@map("plans")
}



model PlanFeature {
  id Int @id  @default(autoincrement())
  plane_id Int
  name String
  status PlanFeatureStatus
  plan Plan @relation(fields: [plane_id],references: [id])
  @@map("plan_features")
}


model Payment {
   id Int @id  @default(autoincrement())
   transaction_id String @unique
   user_id Int
   amount Int
   method PaymentMethod
   status PaymentStatus
   user User @relation(fields: [user_id],references: [id])
   subscription Subscription?
   created_at DateTime @default(now())
   updated_at DateTime @updatedAt
   @@map("payments")
}


model Subscription {
    id Int @id  @default(autoincrement())
    reader_id Int
    payment_id Int @unique
    plan_id Int
    status SubscriptionStatus @default(Active)
    start_at DateTime
    end_at DateTime
    validity_days Int
    reader Reader @relation(fields: [reader_id],references: [id])
    payment Payment @relation(fields: [payment_id],references: [id])
    plan Plan @relation(fields: [plan_id],references: [id])
    planData Json
    created_at DateTime @default(now())
    @@map("subscriptions")
}

model BlogReadHistory {
  reader_id Int
  blog_id Int
  count Int @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  reader Reader @relation(fields: [reader_id],references: [id],onDelete: Cascade)
  blog Blog @relation(fields: [blog_id],references: [id],onDelete: Cascade)
  @@id([reader_id,blog_id])
  @@map("blog_read_histories")
}




model PasswordResetRequest {
  id String @id @default(cuid())
  userId Int
  isUsed Boolean @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  @@map("password_reset_requests")
}



enum UserRole {
    SuperAdmin
    Admin
    Moderator 
    Author 
    Contributor
    Reader
    Guest
}

enum Provider {
  Google
  Email
}

enum UserStatus {
  Active
  Blocked
  Deleted
}

enum BlogStatus {
  Draft
  Published
  Archived
  Scheduled
}

enum BlogPrivacyStatus {
  Public
  Private
}

enum SocialPlatform {
  Facebook
  Instagram
  Twitter
  Linkedin
  Youtube
}

enum ReactionType {
  Like
  Dislike
}

enum PlanDiscountType {
  Percentage
  Fixed
}

enum PlanFeatureStatus {
  Included
  Not_Included
}

enum SubscriptionStatus {
  Active
  Inactive
  Expired
}

enum PaymentMethod {
  Stripe
  Paypal
  SSLCommerz
  Bkash
  Nagad
}


enum PaymentStatus {
  Pending
  Success
  Failed 
  Canceled
  Expired
  Timeout
}


enum FollowerStatus {
  Active
  Blocked
}


enum PlanStatus {
  Active
  Inactive
  Deleted
}